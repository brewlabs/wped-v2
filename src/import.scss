// Blues
$blue-wordpress:         #0087be;
$blue-light:             #78dcfa;
$blue-medium:            #00aadc;
$blue-dark:              #005082;

// Grays
$gray:                   #87a6bc;

// $gray color functions:
//
// lighten( $gray, 10% )
// lighten( $gray, 20% )
// lighten( $gray, 30% )
// darken( $gray, 10% )
// darken( $gray, 20% )
// darken( $gray, 30% )
//
// See wordpress.com/design-handbook/colors/ for more info.

$gray-light:             lighten( $gray, 33% ); //#f3f6f8
$gray-dark:              darken( $gray, 38% ); //#2e4453

// Oranges
$orange-jazzy:           #f0821e;
$orange-fire:            #d54e21;

// Alerts
$alert-yellow:           #f0b849;
$alert-red:              #d94f4f;
$alert-green:            #4ab866;
$alert-purple:           #855DA6;

// Link hovers
$link-highlight:         tint($blue-medium, 20%);

// Essentials
$white:                  rgba(255,255,255,1);
$transparent:            rgba(255,255,255,0);

$border-ultra-light-gray: #e8f0f5;


@mixin clear-text-icon {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	display: inline-block;
	vertical-align: middle;
}

@mixin dashicons {
	@include clear-text-icon;
	font: normal 16px/1 'Dashicons';
}

@mixin noticons {
	@include clear-text-icon;
	font: normal 16px/1 'Noticons';
}


$root-font-size: 16px;

@function rem( $pixels, $context: $root-font-size ) {
    @return $pixels / $context * 1rem;
}

// ==========================================================================
// Breakpoint Mixin
// See https://wpcalypso.wordpress.com/devdocs/docs/coding-guidelines/css.md#media-queries
// ==========================================================================

$breakpoints: 480px, 660px, 960px, 1040px; // Think very carefully before adding a new breakpoint

@mixin breakpoint( $size ){
	@if type-of($size) == string {
	  $approved-value: 0;
		@each $breakpoint in $breakpoints {
			$and-larger: ">" + $breakpoint;
			$and-smaller: "<" + $breakpoint;

			@if $size == $and-smaller {
				$approved-value: 1;
				@media ( max-width: $breakpoint ) {
					@content;
				}
			}
			@else {
				@if $size == $and-larger {
					$approved-value: 2;
					@media ( min-width: $breakpoint + 1 ) {
						@content;
					}
				}
				@else {
					@each $breakpoint-end in $breakpoints {
						$range: $breakpoint + "-" + $breakpoint-end;
						@if $size == $range {
							$approved-value: 3;
							@media ( min-width: $breakpoint + 1 ) and ( max-width: $breakpoint-end ) {
								@content;
							}
						}
					}
				}
			}
		}
		@if $approved-value == 0 {
			$sizes: "";
			@each $breakpoint in $breakpoints {
				$sizes: $sizes + " " + $breakpoint;
			}
			// TODO - change this to use @error, when it is supported by node-sass
			@warn "ERROR in breakpoint( #{ $size } ): You can only use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]";
		}
	}
	@else {
		$sizes: "";
		@each $breakpoint in $breakpoints {
			$sizes: $sizes + " " + $breakpoint;
		}
		// TODO - change this to use @error, when it is supported by node-sass
		@warn "ERROR in breakpoint( #{ $size } ): Please wrap the breakpoint $size in parenthesis. You can use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]";
	}
}